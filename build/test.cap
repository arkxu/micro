require 'json'
require 'net/ftp'
require 'net/http'

require 'capistrano_colors'

load 'deploy'
role :test, ENV['TEST_SERVER']
set :user, 'mmb'
ssh_options[:keys] = '/var/lib/jenkins/.ssh/id_rsa'


def vm_ip(vmx_path, password, options={})
  options = {
      :vmrun => 'vmrun',
      :user => 'root',
      :interface => 'eth0',
  }.merge(options)

  run_locally "#{options[:vmrun]} -gu #{options[:user]} -gp #{password} runScriptInGuest \"#{vmx_path}\" /bin/sh \"/sbin/ifconfig #{options[:interface]} > /tmp/ifconfig\""

  run_locally "#{options[:vmrun]} -gu #{options[:user]} -gp #{password} CopyFileFromGuestToHost \"#{vmx_path}\" /tmp/ifconfig /tmp/ifconfig"

  `cat /tmp/ifconfig`[/inet addr:(\S+) /,1]
end

# Follow a link in the MCF API.
def follow_link(data_in, rel, data_next=nil)
  link = data_in['_links'][rel]
  link_uri = URI(link['href'])

  http = Net::HTTP.new(link_uri.host, link_uri.port)
  http.open_timeout = 300
  http.read_timeout = 300

  if link['method'] == 'get'
    args = [link_uri.path]
  else
    args = [link_uri.path, data_next, { 'Content-Type' => link['type'] }]
  end

  http.send(link['method'], *args)
end

def run_commands(commands)
  run commands.join(' && ')
end

def is_release_version(filename)
  filename[/^micro-v\d+-/]
end

desc 'Run micro rspec specs.'
task :micro_spec, :roles => :test do
  run_commands([
                   '. ~/.bash_profile',
                   'cd ~/micro/micro',
                   'git pull',
                   'bundle install',
                   'rake spec'
               ])
end

desc 'Run micro jasmine specs.'
task :jasmine_spec, :roles => :test do
  run_commands([
                   '. ~/.bash_profile',
                   'cd ~/micro/micro',
                   'git pull',
                   '(bundle check || bundle install || exit 1)',
                   'export DISPLAY=:99',
                   'bundle exec rake assets:precompile jasmine:ci'
               ])
end

desc 'Prepare the test VM and Micro Cloud for vcap-yeti tests.'
task :bvt_setup, :roles => :test do
  # Set the nameserver of the test machine to the Micro Cloud VM.
  resolv_conf_backup = '~/resolv.conf.backup'

  run "cp /etc/resolv.conf #{resolv_conf_backup}"
  run "echo 'nameserver #{micro_vm_ip}' > /tmp/resolv.conf"
  run "#{sudo} cp /tmp/resolv.conf /etc/resolv.conf"

  run_commands([
                   '. ~/.bash_profile',
                   "vmc --trace target http://api.#{domain}/",
                   "(vmc --trace register --email '#{admin_user}' --password '#{admin_password}' --verify '#{admin_password}' || true)",
                   "(vmc --trace register --email '#{normal_user}' --password '#{normal_password}' --verify '#{normal_password}' || true)",
               ])

  run_commands([
                   'cd ~/gem_cache_warmer',
                   '(vmc push -f warmer --runtime ruby19 || true)',
                   '(vmc delete -f warmer || true)',
                   '(vmc push -f warmer --runtime ruby18 || true)',
                   '(vmc delete -f warmer || true)'
               ])
end

desc 'Run vcap-yeti tests.'
task :bvt, :roles => :test do
  run_commands([
                   '. ~/.bash_profile',
                   "export VCAP_BVT_TARGET=api.#{domain}",
                   "export VCAP_BVT_ADMIN_USER='#{admin_user}'",
                   "export VCAP_BVT_ADMIN_USER_PASSWD='#{admin_password}'",
                   "export VCAP_BVT_USER='#{normal_user}'",
                   "export VCAP_BVT_USER_PASSWD='#{normal_password}'",
                   ' cd ~/cf-release/src/tests',
                   './update',
                   'rm -rf ~/.bvt',
                   'bundle exec rake mcf' # till we can fix all yeti test, only try running a subset
               #'bundle exec rake full[1]'
               ])
end

desc 'Revert temporary changes done to the test VM.'
task :bvt_teardown, :roles => :test do
  resolv_conf_backup = '~/resolv.conf.backup'
  run "#{sudo} cp #{resolv_conf_backup} /etc/resolv.conf"
end

desc 'Run vcap-java-client tests.'
task :vcap_java_client_tests, :roles => :test do
  run_commands([
                   'cd ~/vcap-java-client',
                   'git pull',
                   'git submodule update --init --recursive',
                   'cd vcap-java-client-test-apps',
                   'mvn clean install',
                   'cd ../cloudfoundry-client-lib',
                   "mvn clean test -Pintegration-test -Dcloud.version=V1 -Dtest.app.memory=256 -Dvcap.target=http://api.#{domain} -Dvcap.email=#{normal_user} -Dvcap.passwd=#{normal_password}"
               ])
end

desc 'Initial setup of the VM being tested.'
task :initial_setup do
  root_uri = URI("http://#{micro_vm_ip}:9292/api/")

  micro_cloud = JSON.parse(Net::HTTP.get(root_uri))

  offline_resp = follow_link(micro_cloud, 'edit',
                             { internet_connected: false }.to_json)
  p offline_resp
  p offline_resp.body

  admin = JSON.parse(follow_link(micro_cloud, 'administrator').body)

  admin_edit_resp = follow_link(admin, 'edit', {
      email: admin_user,
      password: micro_password
  }.to_json)
  p admin_edit_resp
  p admin_edit_resp.body

  domain_resp = JSON.parse(follow_link(micro_cloud, 'domain_name').body)

  domain_edit_resp = follow_link(domain_resp, 'edit', {
      name: domain,
  }.to_json)
  p domain_edit_resp
  p domain_edit_resp.body

  online_resp = follow_link(micro_cloud, 'edit',
                            { internet_connected: true }.to_json)
  p online_resp
  p online_resp.body
end

desc 'Test the latest Micro Cloud Foundry.'
task :test do
  run_locally "#{vmrun} stop #{vmx} nogui"
  run_locally 'rm -rf /tmp/micro'

  run_locally "cd /tmp && unzip -o #{zip_name}"
  vmx = '/tmp/micro/micro.vmx'
  run_locally "#{vmrun} start #{vmx} nogui"

  sleep 30

  set :micro_vm_ip, vm_ip(vmx, vm_initial_password)

  p micro_vm_ip

  initial_setup

  sleep 300

  micro_spec
  jasmine_spec
  bvt_setup
  bvt
  vcap_java_client_tests
  bvt_teardown
end

__END__
################### Download

desc 'Checkout the latest cf-release master on the test machine.'
task :checkout_cf_release_master_test, :roles => :test do
  run_commands([
                   'cd ~/cf-release',
                   'git checkout master',
                   './update'
               ])
end

desc 'Checkout a cf-release tag on the test machine.'
task :checkout_cf_release_tag_test, :roles => :test do
  run_commands([
                   'cd ~/cf-release',
                   'git checkout master',
                   'git pull',
                   "git branch -f #{tag}branch #{tag}",
                   "git checkout #{tag}branch",
                   'git submodule update --init --recursive'
               ])
end

################### DIST

# Track MCF versions that have been uploaded to the CDN.
class VersionStore

  def initialize(path)
    @path = path
    @releases = []
    @nightlies = []
    @default = nil

    read  if File.exist?(path)
  end

  # Read the store from disk.
  def read
    open(path) do |f|
      data = JSON.parse(f.read)

      @releases = data.fetch('release', [])
      @nightlies = data.fetch('nightly', [])
      @default = data.fetch('default', nil)
    end
  end

  # Write the contents of the store to disk in JSON.
  def write
    open(path, 'w') do |f|
      f.flock(File::LOCK_EX)
      f.write to_json
      f.flock(File::LOCK_UN)
    end
  end

  # Return true if the store contains a release tag.
  def has_release?(tag)
    @releases.index { |r| r[/^micro-#{tag}-/] }
  end

  def to_h
    {
        'release' => @releases.uniq,
        'nightly' => @nightlies.uniq,
        'default' => default
    }
  end

  def to_json
    to_h.to_json
  end

  def pretty
    JSON.pretty_generate(to_h)
  end

  def default
    @default || releases[0]
  end

  attr_accessor :path
  attr_accessor :releases
  attr_accessor :nightlies
  attr_writer :default
end

desc 'Distribute a Micro Cloud zip file.'
task :dist do
  zip_name = File.basename(zip_local_path)

  version_store = VersionStore.new('/var/lib/jenkins/versions.json')

  if is_release_version(zip_name)
    dist_release
    version_store.releases.insert(0, zip_name)
  else
    dist_nightly
    version_store.nightlies.insert(0, zip_name)
  end

  # Pass in default_version as a command line argument if you want to
  # set a default version that is not the latest release.
  if exists?(:default_version)
    version_store.default = default_version
  end

  version_store.write

  p "sending #{version_store.path} to CDN #{cdn_ftp_host}/micro/versions.json"
  p version_store.pretty
  Net::FTP.open(cdn_ftp_host, cdn_ftp_user, cdn_ftp_password) do |ftp|
    ftp.putbinaryfile(version_store.path, "micro/versions.json")
  end
end

desc 'Distribute a nightly version of the Micro Cloud.'
task :dist_nightly do
  p "sending #{zip_local_path} to CDN #{cdn_ftp_host}/micro/nightly"
  zip_name = File.basename(zip_local_path)

  Net::FTP.open(cdn_ftp_host, cdn_ftp_user, cdn_ftp_password) do |ftp|
    ftp.putbinaryfile(zip_local_path, "micro/nightly/#{zip_name}")
  end

  p "http://download3.vmware.com/cloudfoundry/micro/nightly/#{zip_name}"
end


desc 'Distribute a release version of the Micro Cloud.'
task :dist_release do
  p "sending #{zip_local_path} to CDN #{cdn_ftp_host}/micro/release"
  zip_name = File.basename(zip_local_path)

  Net::FTP.open(cdn_ftp_host, cdn_ftp_user, cdn_ftp_password) do |ftp|
    ftp.putbinaryfile(zip_local_path, "micro/release/#{zip_name}")
  end

  p "http://download3.vmware.com/cloudfoundry/micro/release/#{zip_name}"
end